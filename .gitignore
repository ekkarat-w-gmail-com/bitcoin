*.tar.gz

*.exe
src/bitcoin
src/bitcoind
src/bitcoin-cli
src/bitcoin-tx
src/bitcoin-wallet
src/test/test_bitcoin
src/test/test_bitcoin_fuzzy
src/qt/test/test_bitcoin-qt

# autoreconf
Makefile.in
aclocal.m4
autom4te.cache/
build-aux/config.guess
build-aux/config.sub
build-aux/depcomp
build-aux/install-sh
build-aux/ltmain.sh
build-aux/m4/libtool.m4
build-aux/m4/lt~obsolete.m4
build-aux/m4/ltoptions.m4
build-aux/m4/ltsugar.m4
build-aux/m4/ltversion.m4
build-aux/missing
build-aux/compile
build-aux/test-driver
config.log
config.status
configure
libtool
src/config/bitcoin-config.h
src/config/bitcoin-config.h.in
src/config/stamp-h1
share/setup.nsi
share/qt/Info.plist

src/univalue/gen

src/qt/*.moc
src/qt/moc_*.cpp
src/qt/forms/ui_*.h

src/qt/test/moc*.cpp

src/qt/bitcoin-qt.config
src/qt/bitcoin-qt.creator
src/qt/bitcoin-qt.creator.user
src/qt/bitcoin-qt.files
src/qt/bitcoin-qt.includes

.deps
.dirstamp
.libs
.*.swp
*.*~*
*.bak
*.rej
*.orig
*.pyc
*.o
*.o-*
*.patch
*.a
*.pb.cc
*.pb.h
*.dat

*.log
*.trs
*.dmg

*.json.h
*.raw.h

#libtool object files
*.lo
*.la

# Compilation and Qt preprocessor part
*.qm
Makefile
bitcoin-qt
Bitcoin-Qt.app
background.tiff*

# Unit-tests
Makefile.test
bitcoin-qt_test

# Resources cpp
qrc_*.cpp

# Mac specific
.DS_Store
build

#lcov
*.gcno
*.gcda
/*.info
test_bitcoin.coverage/
total.coverage/
coverage_percent.txt

#build tests
linux-coverage-build
linux-build
win32-build
test/config.ini
test/cache/*

!src/leveldb*/Makefile

/doc/doxygen/

libbitcoinconsensus.pc
contrib/devtools/split-debug.sh

# Output from running db4 installation
db4/

# clang-check
*.plist
ublishวิธีการจะได้รับScientist::Resultตัวอย่างที่เกี่ยวข้องกับScientist::Observations:

คลาส MyExperiment 
  รวมถึง Scientist :: Experiment

  # ...

  def  เผยแพร่ ( ผล )

    #จัดเก็บเวลาสำหรับค่าควบคุม
    $ statsd .timing "วิทยาศาสตร์. # { name } .control " , result.control.duration
     #สำหรับผู้สมัคร (เฉพาะคนแรกดูที่ "ทำลายกฎ" ด้านล่าง, 
    $ statsd .timing "วิทยาศาสตร์. # { name } .candidate " , result.candidates.first.duration

    #และนับสำหรับการจับคู่ / ละเว้น / ไม่ตรงกัน: 
    ถ้า result.matches
      $ statsd .increment "วิทยาศาสตร์. # { name }.ตรงกัน"
     elsif result.ignored?
      $ statsd .increment "วิทยาศาสตร์. # { name } .ignored "
     else 
      $ statsd .increment "วิทยาศาสตร์. # { name } .matchatched " 
      #ในที่สุดเก็บข้อผิดพลาดใน redis เพื่อให้พวกเขาสามารถดึงและตรวจสอบ
      # ในภายหลังสำหรับการดีบักและ การวิจัย.
      store_mismatch_data (ผล)
    จบ
  สิ้น

  def  store_mismatch_data ( ผลลัพธ์ )
    payload = {
       : name             => name
                ,: context          => context
       ,: control => observ_payload (result.control),:
       candidate        => observ_payload (result.candidates.first),:
       execution_order => result.observations.map ( & : ชื่อ )
    }

    key =  "วิทยาศาสตร์. # { name } .matchatch "
     $ redis .lpush key, payload
     $ redis .ltrim key, 0 , 1000 
  end

  def  สังเกต_payload ( การสังเกต )
     ถ้าการสังเกตเพิ่มขึ้น?
      {
        : exception => observ.exception.class,:
         message    =>
         observ.exception.message,: backtrace => observ.exception.backtrace
      }
    อื่น
      {
        #โปรดดูที่ "ทำให้สะอาดอยู่เสมอ" ด้านบน
        : value => observ.cleaned_value
      }
    end 
  end 
end
